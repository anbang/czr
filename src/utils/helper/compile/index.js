const path = require('path');
const fs = require('fs');
// const solc = require('../../../../node_modules/solc');
const solc = require('czr-solc');

const srcpath = path.resolve(__dirname, 'contracts', 'CRC20.sol');
const source = fs.readFileSync(srcpath, 'utf-8');

// console.log(source)

let input = {
    "language": 'Solidity',
    "sources": {
        'CRC20.sol': {
            "content": source
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            '*': {
                '': ['legacyAST'],
                '*': ['abi', 'metadata', 'devdoc', 'userdoc', 'evm.legacyAssembly', 'evm.bytecode', 'evm.deployedBytecode', 'evm.methodIdentifiers', 'evm.gasEstimates']
            }
        }
    }
}
// let input={"language":"Solidity","sources":{"CRC20.sol":{"content":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\r\n        name = tokenName;                                       // Set the name for display purposes\r\n        symbol = tokenSymbol;                                   // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract MyAdvancedToken is owned, TokenERC20 {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != address(0x0));                          // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                   // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows\r\n        require(!frozenAccount[_from]);                         // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                           // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                             // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(address(0), address(this), mintedAmount);\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;                 // calculates the amount\r\n        _transfer(address(this), msg.sender, amount);       // makes the transfers\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    function sell(uint256 amount) public {\r\n        address myAddress = address(this);\r\n        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, address(this), amount);       // makes the transfers\r\n        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"":["legacyAST"],"*":["abi","metadata","devdoc","userdoc","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates"]}}}}
// console.log(JSON.stringify(input))

// let output = JSON.parse(solc.compile(JSON.stringify(input)));
let output = JSON.parse(solc.compile(JSON.stringify(input)));

// const result = solc.compile(source);

//console.log(output.contracts['CRC20.sol']['MyAdvancedToken']);

let contractByteCode = output.contracts['CRC20.sol']['MyAdvancedToken'].evm.bytecode.object
let methodIdentifiers = output.contracts['CRC20.sol']['MyAdvancedToken'].evm.methodIdentifiers
let abi = output.contracts['CRC20.sol']['MyAdvancedToken']['abi']

let keys = [];
let values = Object.values(methodIdentifiers)
let methodBytecode = {}
for (let k in Object.keys(methodIdentifiers)) {
    keys.push(Object.keys(methodIdentifiers)[k].split('(')[0]);
    methodBytecode[keys[k]] = values[k]
}


//
// for(let k in abi){
//     if(abi[k].name==="frozenAccount"){
//         console.log(abi[k])
//     }
// }


// let methodBytecode = {
//     allowance: 'dd62ed3e',
//     approve: '095ea7b3',
//     approveAndCall: 'cae9ca51',
//     balanceOf: '70a08231',
//     burn: '42966c68',
//     burnFrom: '79cc6790',
//     buy: 'a6f2ae3a',
//     buyPrice: '8620410b',
//     decimals: '313ce567',
//     freezeAccount: 'e724529c',
//     frozenAccount: 'b414d4b6',
//     mintToken: '79c65068',
//     name: '06fdde03',
//     owner: '8da5cb5b',
//     sell: 'e4849b32',
//     sellPrice: '4b750334',
//     setPrices: '05fefda7',
//     symbol: '95d89b41',
//     totalSupply: '18160ddd',
//     transfer: 'a9059cbb',
//     transferFrom: '23b872dd',
//     transferOwnership: 'f2fde38b'
// }

// console.log("contractByteCode")
// console.log(contractByteCode)
// console.log("methodBytecode")
// console.log(methodBytecode)
// console.log("abi")
// console.log(abi)
module.exports = {
    contractByteCode: contractByteCode,
    methodBytecode: methodBytecode,
    abi: abi
}

//00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003637a7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003435a520000000000000000000000000000000000000000000000000000000000
//00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003637a7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003435a520000000000000000000000000000000000000000000000000000000000
//60806040526003805460ff191660121790553480156200001e57600080fd5b5060405162000ebc38038062000ebc833981018060405260608110156200004457600080fd5b8151602083018051919392830192916401000000008111156200006657600080fd5b820160208101848111156200007a57600080fd5b81516401000000008111828201871017156200009557600080fd5b50509291906020018051640100000000811115620000b257600080fd5b82016020810184811115620000c657600080fd5b8151640100000000811182820187101715620000e157600080fd5b505033600081815560035460ff16600a0a8802600481905591815260056020908152604090912091909155855191945086935085925084916200012b91600191908501906200014e565b508051620001419060029060208401906200014e565b50505050505050620001f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b620001f091905b80821115620001cf5760008155600101620001da565b90565b610cb980620002036000396000f3fe608060405260043610610152576000357c0100000000000000000000000000000000000000000000000000000000900480638620410b116100c8578063b414d4b61161008c578063b414d4b61461041f578063cae9ca5114610449578063dd62ed3e14610508578063e4849b3214610538578063e724529c14610562578063f2fde38b1461059457610152565b80638620410b146103a85780638da5cb5b146103bd57806395d89b41146103d2578063a6f2ae3a146103e7578063a9059cbb146103ef57610152565b8063313ce5671161011a578063313ce567146102b457806342966c68146102df5780634b7503341461030957806370a082311461031e57806379c650681461034857806379cc67901461037857610152565b806305fefda71461015757806306fdde0314610189578063095ea7b31461021357806318160ddd1461025757806323b872dd1461027e575b600080fd5b34801561016357600080fd5b506101876004803603604081101561017a57600080fd5b50803590602001356105be565b005b34801561019557600080fd5b5061019e6105d7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d85781810151838201526020016101c0565b50505050905090810190601f1680156102055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021f57600080fd5b506102436004803603604081101561023657600080fd5b5080359060200135610664565b604080519115158252519081900360200190f35b34801561026357600080fd5b5061026c6106bf565b60408051918252519081900360200190f35b34801561028a57600080fd5b50610243600480360360608110156102a157600080fd5b50803590602081013590604001356106c5565b3480156102c057600080fd5b506102c9610721565b6040805160ff9092168252519081900360200190f35b3480156102eb57600080fd5b506102436004803603602081101561030257600080fd5b503561072a565b34801561031557600080fd5b5061026c6107a2565b34801561032a57600080fd5b5061026c6004803603602081101561034157600080fd5b50356107a8565b34801561035457600080fd5b506101876004803603604081101561036b57600080fd5b50803590602001356107ba565b34801561038457600080fd5b506102436004803603604081101561039b57600080fd5b5080359060200135610854565b3480156103b457600080fd5b5061026c610908565b3480156103c957600080fd5b5061026c61090e565b3480156103de57600080fd5b5061019e610914565b61018761096c565b3480156103fb57600080fd5b506102436004803603604081101561041257600080fd5b508035906020013561098c565b34801561042b57600080fd5b506102436004803603602081101561044257600080fd5b50356109a2565b34801561045557600080fd5b506102436004803603606081101561046c57600080fd5b81359160208101359181019060608101604082013564010000000081111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111640100000000831117156104c757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109b7945050505050565b34801561051457600080fd5b5061026c6004803603604081101561052b57600080fd5b5080359060200135610ac6565b34801561054457600080fd5b506101876004803603602081101561055b57600080fd5b5035610ae3565b34801561056e57600080fd5b506101876004803603604081101561058557600080fd5b50803590602001351515610b37565b3480156105a057600080fd5b50610187600480360360208110156105b757600080fd5b5035610ba0565b60005433146105cc57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b505050505081565b3360008181526006602090815260408083208684528252808320859055805185815290519293869390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b60008381526006602090815260408083203384529091528120548211156106eb57600080fd5b6000848152600660209081526040808320338452909152902080548390039055610716848484610bb3565b5060015b9392505050565b60035460ff1681565b3360009081526005602052604081205482111561074657600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b60005433146107c857600080fd5b60008281526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051839130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008281526005602052604081205482111561086f57600080fd5b600083815260066020908152604080832033845290915290205482111561089557600080fd5b60008381526005602090815260408083208054869003905560068252808320338452825291829020805485900390556004805485900390558151848152915185927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592908290030190a250600192915050565b60085481565b60005481565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b60006008543481151561097b57fe5b049050610989303383610bb3565b50565b6000610999338484610bb3565b50600192915050565b60096020526000908152604090205460ff1681565b6000836109c48185610664565b15610abe5780638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a4d578181015183820152602001610a35565b50505050905090810190601f168015610a7a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b50505050600191505061071a565b509392505050565b600660209081526000928352604080842090915290825290205481565b6007543090820281311015610af757600080fd5b610b02333084610bb3565b6007546040513391840280156108fc02916000818181858888f19350505050158015610b32573d6000803e3d6000fd5b505050565b6000543314610b4557600080fd5b600082815260096020908152604091829020805460ff191684151590811790915582518581529182015281517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5929181900390910190a15050565b6000543314610bae57600080fd5b600055565b811515610bbf57600080fd5b600083815260056020526040902054811115610bda57600080fd5b6000828152600560205260409020548181011015610bf757600080fd5b60008381526009602052604090205460ff1615610c1357600080fd5b60008281526009602052604090205460ff1615610c2f57600080fd5b6000838152600560209081526040808320805485900390558483529182902080548401905581518381529151849286927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fea165627a7a72305820b143af9ee717f65b9401a18736f44e17c9beed031b949ed0563929aa8bc191110029
//60806040526003805460ff191660121790553480156200001e57600080fd5b5060405162000ebc38038062000ebc833981018060405260608110156200004457600080fd5b8151602083018051919392830192916401000000008111156200006657600080fd5b820160208101848111156200007a57600080fd5b81516401000000008111828201871017156200009557600080fd5b50509291906020018051640100000000811115620000b257600080fd5b82016020810184811115620000c657600080fd5b8151640100000000811182820187101715620000e157600080fd5b505033600081815560035460ff16600a0a8802600481905591815260056020908152604090912091909155855191945086935085925084916200012b91600191908501906200014e565b508051620001419060029060208401906200014e565b50505050505050620001f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b620001f091905b80821115620001cf5760008155600101620001da565b90565b610cb980620002036000396000f3fe608060405260043610610152576000357c0100000000000000000000000000000000000000000000000000000000900480638620410b116100c8578063b414d4b61161008c578063b414d4b61461041f578063cae9ca5114610449578063dd62ed3e14610508578063e4849b3214610538578063e724529c14610562578063f2fde38b1461059457610152565b80638620410b146103a85780638da5cb5b146103bd57806395d89b41146103d2578063a6f2ae3a146103e7578063a9059cbb146103ef57610152565b8063313ce5671161011a578063313ce567146102b457806342966c68146102df5780634b7503341461030957806370a082311461031e57806379c650681461034857806379cc67901461037857610152565b806305fefda71461015757806306fdde0314610189578063095ea7b31461021357806318160ddd1461025757806323b872dd1461027e575b600080fd5b34801561016357600080fd5b506101876004803603604081101561017a57600080fd5b50803590602001356105be565b005b34801561019557600080fd5b5061019e6105d7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d85781810151838201526020016101c0565b50505050905090810190601f1680156102055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021f57600080fd5b506102436004803603604081101561023657600080fd5b5080359060200135610664565b604080519115158252519081900360200190f35b34801561026357600080fd5b5061026c6106bf565b60408051918252519081900360200190f35b34801561028a57600080fd5b50610243600480360360608110156102a157600080fd5b50803590602081013590604001356106c5565b3480156102c057600080fd5b506102c9610721565b6040805160ff9092168252519081900360200190f35b3480156102eb57600080fd5b506102436004803603602081101561030257600080fd5b503561072a565b34801561031557600080fd5b5061026c6107a2565b34801561032a57600080fd5b5061026c6004803603602081101561034157600080fd5b50356107a8565b34801561035457600080fd5b506101876004803603604081101561036b57600080fd5b50803590602001356107ba565b34801561038457600080fd5b506102436004803603604081101561039b57600080fd5b5080359060200135610854565b3480156103b457600080fd5b5061026c610908565b3480156103c957600080fd5b5061026c61090e565b3480156103de57600080fd5b5061019e610914565b61018761096c565b3480156103fb57600080fd5b506102436004803603604081101561041257600080fd5b508035906020013561098c565b34801561042b57600080fd5b506102436004803603602081101561044257600080fd5b50356109a2565b34801561045557600080fd5b506102436004803603606081101561046c57600080fd5b81359160208101359181019060608101604082013564010000000081111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111640100000000831117156104c757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109b7945050505050565b34801561051457600080fd5b5061026c6004803603604081101561052b57600080fd5b5080359060200135610ac6565b34801561054457600080fd5b506101876004803603602081101561055b57600080fd5b5035610ae3565b34801561056e57600080fd5b506101876004803603604081101561058557600080fd5b50803590602001351515610b37565b3480156105a057600080fd5b50610187600480360360208110156105b757600080fd5b5035610ba0565b60005433146105cc57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b505050505081565b3360008181526006602090815260408083208684528252808320859055805185815290519293869390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b60008381526006602090815260408083203384529091528120548211156106eb57600080fd5b6000848152600660209081526040808320338452909152902080548390039055610716848484610bb3565b5060015b9392505050565b60035460ff1681565b3360009081526005602052604081205482111561074657600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b60005433146107c857600080fd5b60008281526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051839130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008281526005602052604081205482111561086f57600080fd5b600083815260066020908152604080832033845290915290205482111561089557600080fd5b60008381526005602090815260408083208054869003905560068252808320338452825291829020805485900390556004805485900390558151848152915185927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592908290030190a250600192915050565b60085481565b60005481565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b60006008543481151561097b57fe5b049050610989303383610bb3565b50565b6000610999338484610bb3565b50600192915050565b60096020526000908152604090205460ff1681565b6000836109c48185610664565b15610abe5780638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a4d578181015183820152602001610a35565b50505050905090810190601f168015610a7a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b50505050600191505061071a565b509392505050565b600660209081526000928352604080842090915290825290205481565b6007543090820281311015610af757600080fd5b610b02333084610bb3565b6007546040513391840280156108fc02916000818181858888f19350505050158015610b32573d6000803e3d6000fd5b505050565b6000543314610b4557600080fd5b600082815260096020908152604091829020805460ff191684151590811790915582518581529182015281517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5929181900390910190a15050565b6000543314610bae57600080fd5b600055565b811515610bbf57600080fd5b600083815260056020526040902054811115610bda57600080fd5b6000828152600560205260409020548181011015610bf757600080fd5b60008381526009602052604090205460ff1615610c1357600080fd5b60008281526009602052604090205460ff1615610c2f57600080fd5b6000838152600560209081526040808320805485900390558483529182902080548401905581518381529151849286927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fea165627a7a7230582038a783b8c358e14a9322f10593eaa2865cae77a3ac2d0afc51857de3e086043b0029
//60806040526003805460ff191660121790553480156200001e57600080fd5b5060405162000ebc38038062000ebc833981018060405260608110156200004457600080fd5b8151602083018051919392830192916401000000008111156200006657600080fd5b820160208101848111156200007a57600080fd5b81516401000000008111828201871017156200009557600080fd5b50509291906020018051640100000000811115620000b257600080fd5b82016020810184811115620000c657600080fd5b8151640100000000811182820187101715620000e157600080fd5b505033600081815560035460ff16600a0a8802600481905591815260056020908152604090912091909155855191945086935085925084916200012b91600191908501906200014e565b508051620001419060029060208401906200014e565b50505050505050620001f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b620001f091905b80821115620001cf5760008155600101620001da565b90565b610cb980620002036000396000f3fe608060405260043610610152576000357c0100000000000000000000000000000000000000000000000000000000900480638620410b116100c8578063b414d4b61161008c578063b414d4b61461041f578063cae9ca5114610449578063dd62ed3e14610508578063e4849b3214610538578063e724529c14610562578063f2fde38b1461059457610152565b80638620410b146103a85780638da5cb5b146103bd57806395d89b41146103d2578063a6f2ae3a146103e7578063a9059cbb146103ef57610152565b8063313ce5671161011a578063313ce567146102b457806342966c68146102df5780634b7503341461030957806370a082311461031e57806379c650681461034857806379cc67901461037857610152565b806305fefda71461015757806306fdde0314610189578063095ea7b31461021357806318160ddd1461025757806323b872dd1461027e575b600080fd5b34801561016357600080fd5b506101876004803603604081101561017a57600080fd5b50803590602001356105be565b005b34801561019557600080fd5b5061019e6105d7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d85781810151838201526020016101c0565b50505050905090810190601f1680156102055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021f57600080fd5b506102436004803603604081101561023657600080fd5b5080359060200135610664565b604080519115158252519081900360200190f35b34801561026357600080fd5b5061026c6106bf565b60408051918252519081900360200190f35b34801561028a57600080fd5b50610243600480360360608110156102a157600080fd5b50803590602081013590604001356106c5565b3480156102c057600080fd5b506102c9610721565b6040805160ff9092168252519081900360200190f35b3480156102eb57600080fd5b506102436004803603602081101561030257600080fd5b503561072a565b34801561031557600080fd5b5061026c6107a2565b34801561032a57600080fd5b5061026c6004803603602081101561034157600080fd5b50356107a8565b34801561035457600080fd5b506101876004803603604081101561036b57600080fd5b50803590602001356107ba565b34801561038457600080fd5b506102436004803603604081101561039b57600080fd5b5080359060200135610854565b3480156103b457600080fd5b5061026c610908565b3480156103c957600080fd5b5061026c61090e565b3480156103de57600080fd5b5061019e610914565b61018761096c565b3480156103fb57600080fd5b506102436004803603604081101561041257600080fd5b508035906020013561098c565b34801561042b57600080fd5b506102436004803603602081101561044257600080fd5b50356109a2565b34801561045557600080fd5b506102436004803603606081101561046c57600080fd5b81359160208101359181019060608101604082013564010000000081111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111640100000000831117156104c757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109b7945050505050565b34801561051457600080fd5b5061026c6004803603604081101561052b57600080fd5b5080359060200135610ac6565b34801561054457600080fd5b506101876004803603602081101561055b57600080fd5b5035610ae3565b34801561056e57600080fd5b506101876004803603604081101561058557600080fd5b50803590602001351515610b37565b3480156105a057600080fd5b50610187600480360360208110156105b757600080fd5b5035610ba0565b60005433146105cc57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b505050505081565b3360008181526006602090815260408083208684528252808320859055805185815290519293869390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b60008381526006602090815260408083203384529091528120548211156106eb57600080fd5b6000848152600660209081526040808320338452909152902080548390039055610716848484610bb3565b5060015b9392505050565b60035460ff1681565b3360009081526005602052604081205482111561074657600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b60005433146107c857600080fd5b60008281526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051839130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008281526005602052604081205482111561086f57600080fd5b600083815260066020908152604080832033845290915290205482111561089557600080fd5b60008381526005602090815260408083208054869003905560068252808320338452825291829020805485900390556004805485900390558151848152915185927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592908290030190a250600192915050565b60085481565b60005481565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561065c5780601f106106315761010080835404028352916020019161065c565b60006008543481151561097b57fe5b049050610989303383610bb3565b50565b6000610999338484610bb3565b50600192915050565b60096020526000908152604090205460ff1681565b6000836109c48185610664565b15610abe5780638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a4d578181015183820152602001610a35565b50505050905090810190601f168015610a7a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b50505050600191505061071a565b509392505050565b600660209081526000928352604080842090915290825290205481565b6007543090820281311015610af757600080fd5b610b02333084610bb3565b6007546040513391840280156108fc02916000818181858888f19350505050158015610b32573d6000803e3d6000fd5b505050565b6000543314610b4557600080fd5b600082815260096020908152604091829020805460ff191684151590811790915582518581529182015281517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5929181900390910190a15050565b6000543314610bae57600080fd5b600055565b811515610bbf57600080fd5b600083815260056020526040902054811115610bda57600080fd5b6000828152600560205260409020548181011015610bf757600080fd5b60008381526009602052604090205460ff1615610c1357600080fd5b60008281526009602052604090205460ff1615610c2f57600080fd5b6000838152600560209081526040808320805485900390558483529182902080548401905581518381529151849286927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fea165627a7a7230582063c3d4bbdcf3824b098d5c829d1aea0e1656c2e1509d8696ae3392eab36c5ea70029
